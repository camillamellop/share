// Code generated by the Encore 1.48.8 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly agenda: agenda.ServiceClient
    public readonly auth: auth.ServiceClient
    public readonly communications: communications.ServiceClient
    public readonly dashboard: dashboard.ServiceClient
    public readonly financial: financial.ServiceClient
    public readonly maintenance: maintenance.ServiceClient
    public readonly notes: notes.ServiceClient
    public readonly operations: operations.ServiceClient
    public readonly profile: profile.ServiceClient
    public readonly purchasing: purchasing.ServiceClient
    public readonly search: search.ServiceClient
    public readonly tasks: tasks.ServiceClient
    public readonly vacation: vacation.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.agenda = new agenda.ServiceClient(base)
        this.auth = new auth.ServiceClient(base)
        this.communications = new communications.ServiceClient(base)
        this.dashboard = new dashboard.ServiceClient(base)
        this.financial = new financial.ServiceClient(base)
        this.maintenance = new maintenance.ServiceClient(base)
        this.notes = new notes.ServiceClient(base)
        this.operations = new operations.ServiceClient(base)
        this.profile = new profile.ServiceClient(base)
        this.purchasing = new purchasing.ServiceClient(base)
        this.search = new search.ServiceClient(base)
        this.tasks = new tasks.ServiceClient(base)
        this.vacation = new vacation.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * Import the auth handler to be able to derive the auth type
 */
import type { auth as auth_auth } from "~backend/auth/auth";

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: RequestType<typeof auth_auth> | AuthDataGenerator
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createClient as api_agenda_clients_createClient,
    deleteClient as api_agenda_clients_deleteClient,
    getClients as api_agenda_clients_getClients,
    updateClient as api_agenda_clients_updateClient
} from "~backend/agenda/clients";
import {
    createContact as api_agenda_contacts_createContact,
    deleteContact as api_agenda_contacts_deleteContact,
    getContacts as api_agenda_contacts_getContacts,
    toggleFavorite as api_agenda_contacts_toggleFavorite,
    updateContact as api_agenda_contacts_updateContact
} from "~backend/agenda/contacts";

export namespace agenda {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createClient = this.createClient.bind(this)
            this.createContact = this.createContact.bind(this)
            this.deleteClient = this.deleteClient.bind(this)
            this.deleteContact = this.deleteContact.bind(this)
            this.getClients = this.getClients.bind(this)
            this.getContacts = this.getContacts.bind(this)
            this.toggleFavorite = this.toggleFavorite.bind(this)
            this.updateClient = this.updateClient.bind(this)
            this.updateContact = this.updateContact.bind(this)
        }

        /**
         * Creates a new client.
         */
        public async createClient(params: RequestType<typeof api_agenda_clients_createClient>): Promise<ResponseType<typeof api_agenda_clients_createClient>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/clients`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_agenda_clients_createClient>
        }

        /**
         * Creates a new contact.
         */
        public async createContact(params: RequestType<typeof api_agenda_contacts_createContact>): Promise<ResponseType<typeof api_agenda_contacts_createContact>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contacts`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_agenda_contacts_createContact>
        }

        /**
         * Deletes a client.
         */
        public async deleteClient(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/clients/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a contact.
         */
        public async deleteContact(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/contacts/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves all clients.
         */
        public async getClients(): Promise<ResponseType<typeof api_agenda_clients_getClients>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/clients`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_agenda_clients_getClients>
        }

        /**
         * Retrieves all contacts.
         */
        public async getContacts(): Promise<ResponseType<typeof api_agenda_contacts_getContacts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contacts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_agenda_contacts_getContacts>
        }

        /**
         * Toggles favorite status of a contact.
         */
        public async toggleFavorite(params: { id: string }): Promise<ResponseType<typeof api_agenda_contacts_toggleFavorite>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contacts/${encodeURIComponent(params.id)}/favorite`, {method: "PATCH", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_agenda_contacts_toggleFavorite>
        }

        /**
         * Updates an existing client.
         */
        public async updateClient(params: RequestType<typeof api_agenda_clients_updateClient>): Promise<ResponseType<typeof api_agenda_clients_updateClient>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                active:     params.active,
                address:    params.address,
                city:       params.city,
                company:    params.company,
                document:   params.document,
                email:      params.email,
                name:       params.name,
                notes:      params.notes,
                phone:      params.phone,
                state:      params.state,
                "zip_code": params["zip_code"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/clients/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_agenda_clients_updateClient>
        }

        /**
         * Updates an existing contact.
         */
        public async updateContact(params: RequestType<typeof api_agenda_contacts_updateContact>): Promise<ResponseType<typeof api_agenda_contacts_updateContact>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                cargo:                params.cargo,
                "categoria_cor":      params["categoria_cor"],
                "categoria_nome":     params["categoria_nome"],
                emails:               params.emails,
                empresa:              params.empresa,
                "endereco_principal": params["endereco_principal"],
                favorito:             params.favorito,
                nome:                 params.nome,
                observacoes:          params.observacoes,
                telefones:            params.telefones,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contacts/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_agenda_contacts_updateContact>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createUser as api_auth_users_createUser,
    deleteUser as api_auth_users_deleteUser,
    listUsers as api_auth_users_listUsers,
    updateUser as api_auth_users_updateUser
} from "~backend/auth/users";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createUser = this.createUser.bind(this)
            this.deleteUser = this.deleteUser.bind(this)
            this.listUsers = this.listUsers.bind(this)
            this.updateUser = this.updateUser.bind(this)
        }

        /**
         * Creates a new user. (Admin only)
         */
        public async createUser(params: RequestType<typeof api_auth_users_createUser>): Promise<ResponseType<typeof api_auth_users_createUser>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/users`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_users_createUser>
        }

        /**
         * Deletes a user. (Admin only)
         */
        public async deleteUser(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/auth/users/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Lists all users. (Admin only)
         */
        public async listUsers(): Promise<ResponseType<typeof api_auth_users_listUsers>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/users`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_users_listUsers>
        }

        /**
         * Updates a user. (Admin only)
         */
        public async updateUser(params: RequestType<typeof api_auth_users_updateUser>): Promise<ResponseType<typeof api_auth_users_updateUser>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                email:       params.email,
                "is_active": params["is_active"],
                name:        params.name,
                password:    params.password,
                role:        params.role,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/users/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_users_updateUser>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    create as api_communications_announcements_create,
    del as api_communications_announcements_del,
    list as api_communications_announcements_list,
    update as api_communications_announcements_update
} from "~backend/communications/announcements";

export namespace communications {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.del = this.del.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new announcement.
         */
        public async create(params: RequestType<typeof api_communications_announcements_create>): Promise<ResponseType<typeof api_communications_announcements_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/announcements`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_announcements_create>
        }

        /**
         * Deletes an announcement.
         */
        public async del(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/announcements/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Lists all announcements.
         */
        public async list(): Promise<ResponseType<typeof api_communications_announcements_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/announcements`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_announcements_list>
        }

        /**
         * Updates an announcement.
         */
        public async update(params: RequestType<typeof api_communications_announcements_update>): Promise<ResponseType<typeof api_communications_announcements_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content: params.content,
                title:   params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/announcements/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_announcements_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getScheduledFlights as api_dashboard_flights_getScheduledFlights } from "~backend/dashboard/flights";
import { getUserProfile as api_dashboard_user_profile_getUserProfile } from "~backend/dashboard/user-profile";
import { getCurrentWeather as api_dashboard_weather_getCurrentWeather } from "~backend/dashboard/weather";

export namespace dashboard {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getCurrentWeather = this.getCurrentWeather.bind(this)
            this.getScheduledFlights = this.getScheduledFlights.bind(this)
            this.getUserProfile = this.getUserProfile.bind(this)
        }

        /**
         * Retrieves current weather for a given location.
         */
        public async getCurrentWeather(params: RequestType<typeof api_dashboard_weather_getCurrentWeather>): Promise<ResponseType<typeof api_dashboard_weather_getCurrentWeather>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                lat: String(params.lat),
                lon: String(params.lon),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/weather/current`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_dashboard_weather_getCurrentWeather>
        }

        /**
         * Retrieves scheduled flights for today.
         */
        public async getScheduledFlights(): Promise<ResponseType<typeof api_dashboard_flights_getScheduledFlights>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flights/scheduled`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_dashboard_flights_getScheduledFlights>
        }

        /**
         * Retrieves the user profile and vacation information.
         */
        public async getUserProfile(): Promise<ResponseType<typeof api_dashboard_user_profile_getUserProfile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/profile`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_dashboard_user_profile_getUserProfile>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createBilling as api_financial_billing_createBilling,
    getBillingDocuments as api_financial_billing_getBillingDocuments
} from "~backend/financial/billing";
import {
    getCompanyConfig as api_financial_company_config_getCompanyConfig,
    saveCompanyConfig as api_financial_company_config_saveCompanyConfig
} from "~backend/financial/company-config";
import {
    createReceipt as api_financial_receipts_createReceipt,
    getReceipts as api_financial_receipts_getReceipts
} from "~backend/financial/receipts";
import {
    createTransaction as api_financial_transactions_createTransaction,
    deleteTransaction as api_financial_transactions_deleteTransaction,
    listTransactions as api_financial_transactions_listTransactions,
    updateTransactionStatus as api_financial_transactions_updateTransactionStatus
} from "~backend/financial/transactions";
import {
    createTravelReport as api_financial_travel_reports_createTravelReport,
    getTravelReports as api_financial_travel_reports_getTravelReports
} from "~backend/financial/travel-reports";

export namespace financial {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createBilling = this.createBilling.bind(this)
            this.createReceipt = this.createReceipt.bind(this)
            this.createTransaction = this.createTransaction.bind(this)
            this.createTravelReport = this.createTravelReport.bind(this)
            this.deleteTransaction = this.deleteTransaction.bind(this)
            this.getBillingDocuments = this.getBillingDocuments.bind(this)
            this.getCompanyConfig = this.getCompanyConfig.bind(this)
            this.getReceipts = this.getReceipts.bind(this)
            this.getTravelReports = this.getTravelReports.bind(this)
            this.listTransactions = this.listTransactions.bind(this)
            this.saveCompanyConfig = this.saveCompanyConfig.bind(this)
            this.updateTransactionStatus = this.updateTransactionStatus.bind(this)
        }

        /**
         * Creates a new billing document.
         */
        public async createBilling(params: RequestType<typeof api_financial_billing_createBilling>): Promise<ResponseType<typeof api_financial_billing_createBilling>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/billing`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_billing_createBilling>
        }

        /**
         * Creates a new receipt.
         */
        public async createReceipt(params: RequestType<typeof api_financial_receipts_createReceipt>): Promise<ResponseType<typeof api_financial_receipts_createReceipt>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/receipts`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_receipts_createReceipt>
        }

        /**
         * Creates a new manual financial transaction.
         */
        public async createTransaction(params: RequestType<typeof api_financial_transactions_createTransaction>): Promise<ResponseType<typeof api_financial_transactions_createTransaction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/financial/transactions`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_transactions_createTransaction>
        }

        /**
         * Creates a new travel report.
         */
        public async createTravelReport(params: RequestType<typeof api_financial_travel_reports_createTravelReport>): Promise<ResponseType<typeof api_financial_travel_reports_createTravelReport>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/travel-reports`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_travel_reports_createTravelReport>
        }

        /**
         * Deletes a financial transaction.
         */
        public async deleteTransaction(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/financial/transactions/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves all billing documents.
         */
        public async getBillingDocuments(): Promise<ResponseType<typeof api_financial_billing_getBillingDocuments>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/billing`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_billing_getBillingDocuments>
        }

        /**
         * Retrieves the company configuration.
         */
        public async getCompanyConfig(): Promise<ResponseType<typeof api_financial_company_config_getCompanyConfig>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/company/config`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_company_config_getCompanyConfig>
        }

        /**
         * Retrieves all receipts.
         */
        public async getReceipts(): Promise<ResponseType<typeof api_financial_receipts_getReceipts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/receipts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_receipts_getReceipts>
        }

        /**
         * Retrieves all travel reports.
         */
        public async getTravelReports(): Promise<ResponseType<typeof api_financial_travel_reports_getTravelReports>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/travel-reports`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_travel_reports_getTravelReports>
        }

        /**
         * Lists financial transactions with optional filters.
         */
        public async listTransactions(params: RequestType<typeof api_financial_transactions_listTransactions>): Promise<ResponseType<typeof api_financial_transactions_listTransactions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                status: params.status,
                type:   params.type === undefined ? undefined : String(params.type),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/financial/transactions`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_transactions_listTransactions>
        }

        /**
         * Creates or updates the company configuration.
         */
        public async saveCompanyConfig(params: RequestType<typeof api_financial_company_config_saveCompanyConfig>): Promise<ResponseType<typeof api_financial_company_config_saveCompanyConfig>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/company/config`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_company_config_saveCompanyConfig>
        }

        /**
         * Updates the status of a financial transaction.
         */
        public async updateTransactionStatus(params: RequestType<typeof api_financial_transactions_updateTransactionStatus>): Promise<ResponseType<typeof api_financial_transactions_updateTransactionStatus>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                status: params.status,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/financial/transactions/${encodeURIComponent(params.id)}/status`, {method: "PATCH", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_financial_transactions_updateTransactionStatus>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createAircraftInspection as api_maintenance_expirations_createAircraftInspection,
    createCrewExpiration as api_maintenance_expirations_createCrewExpiration,
    deleteAircraftInspection as api_maintenance_expirations_deleteAircraftInspection,
    deleteCrewExpiration as api_maintenance_expirations_deleteCrewExpiration,
    getDashboardAlerts as api_maintenance_expirations_getDashboardAlerts,
    listAllExpirations as api_maintenance_expirations_listAllExpirations,
    updateAircraftInspection as api_maintenance_expirations_updateAircraftInspection,
    updateCrewExpiration as api_maintenance_expirations_updateCrewExpiration
} from "~backend/maintenance/expirations";

export namespace maintenance {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createAircraftInspection = this.createAircraftInspection.bind(this)
            this.createCrewExpiration = this.createCrewExpiration.bind(this)
            this.deleteAircraftInspection = this.deleteAircraftInspection.bind(this)
            this.deleteCrewExpiration = this.deleteCrewExpiration.bind(this)
            this.getDashboardAlerts = this.getDashboardAlerts.bind(this)
            this.listAllExpirations = this.listAllExpirations.bind(this)
            this.updateAircraftInspection = this.updateAircraftInspection.bind(this)
            this.updateCrewExpiration = this.updateCrewExpiration.bind(this)
        }

        public async createAircraftInspection(params: RequestType<typeof api_maintenance_expirations_createAircraftInspection>): Promise<ResponseType<typeof api_maintenance_expirations_createAircraftInspection>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/maintenance/aircraft-inspections`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_maintenance_expirations_createAircraftInspection>
        }

        public async createCrewExpiration(params: RequestType<typeof api_maintenance_expirations_createCrewExpiration>): Promise<ResponseType<typeof api_maintenance_expirations_createCrewExpiration>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/maintenance/crew-expirations`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_maintenance_expirations_createCrewExpiration>
        }

        public async deleteAircraftInspection(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/maintenance/aircraft-inspections/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        public async deleteCrewExpiration(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/maintenance/crew-expirations/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        public async getDashboardAlerts(params: RequestType<typeof api_maintenance_expirations_getDashboardAlerts>): Promise<ResponseType<typeof api_maintenance_expirations_getDashboardAlerts>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                days: params.days === undefined ? undefined : String(params.days),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/maintenance/dashboard-alerts`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_maintenance_expirations_getDashboardAlerts>
        }

        public async listAllExpirations(): Promise<ResponseType<typeof api_maintenance_expirations_listAllExpirations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/maintenance/expirations`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_maintenance_expirations_listAllExpirations>
        }

        public async updateAircraftInspection(params: RequestType<typeof api_maintenance_expirations_updateAircraftInspection>): Promise<ResponseType<typeof api_maintenance_expirations_updateAircraftInspection>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "aircraft_id":           params["aircraft_id"],
                "aircraft_registration": params["aircraft_registration"],
                "inspection_type":       params["inspection_type"],
                "last_inspection_date":  params["last_inspection_date"],
                "last_inspection_hours": params["last_inspection_hours"],
                "next_due_date":         params["next_due_date"],
                "next_due_hours":        params["next_due_hours"],
                notes:                   params.notes,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/maintenance/aircraft-inspections/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_maintenance_expirations_updateAircraftInspection>
        }

        public async updateCrewExpiration(params: RequestType<typeof api_maintenance_expirations_updateCrewExpiration>): Promise<ResponseType<typeof api_maintenance_expirations_updateCrewExpiration>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "crew_member_id":   params["crew_member_id"],
                "crew_member_name": params["crew_member_name"],
                "expiration_date":  params["expiration_date"],
                "item_type":        params["item_type"],
                notes:              params.notes,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/maintenance/crew-expirations/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_maintenance_expirations_updateCrewExpiration>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    get as api_notes_notes_get,
    save as api_notes_notes_save
} from "~backend/notes/notes";

export namespace notes {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.get = this.get.bind(this)
            this.save = this.save.bind(this)
        }

        /**
         * Retrieves notes for the authenticated user.
         */
        public async get(): Promise<ResponseType<typeof api_notes_notes_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notes`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_notes_notes_get>
        }

        /**
         * Saves notes for the authenticated user.
         */
        public async save(params: RequestType<typeof api_notes_notes_save>): Promise<ResponseType<typeof api_notes_notes_save>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notes`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_notes_notes_save>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createAerodrome as api_operations_aerodromes_createAerodrome,
    deleteAerodrome as api_operations_aerodromes_deleteAerodrome,
    getAerodromes as api_operations_aerodromes_getAerodromes,
    updateAerodrome as api_operations_aerodromes_updateAerodrome
} from "~backend/operations/aerodromes";
import {
    createAircraft as api_operations_aircraft_createAircraft,
    deleteAircraft as api_operations_aircraft_deleteAircraft,
    getAircrafts as api_operations_aircraft_getAircrafts,
    updateAircraft as api_operations_aircraft_updateAircraft
} from "~backend/operations/aircraft";
import {
    createCrewMember as api_operations_crew_createCrewMember,
    deleteCrewMember as api_operations_crew_deleteCrewMember,
    getCrewMembers as api_operations_crew_getCrewMembers,
    getPilots as api_operations_crew_getPilots,
    updateCrewMember as api_operations_crew_updateCrewMember
} from "~backend/operations/crew";
import {
    calculateFlightParameters as api_operations_flight_planning_calculateFlightParameters,
    createFavoriteRoute as api_operations_flight_planning_createFavoriteRoute,
    createFlightPlan as api_operations_flight_planning_createFlightPlan,
    deleteFavoriteRoute as api_operations_flight_planning_deleteFavoriteRoute,
    deleteFlightPlan as api_operations_flight_planning_deleteFlightPlan,
    getFavoriteRoutes as api_operations_flight_planning_getFavoriteRoutes,
    getFlightPlans as api_operations_flight_planning_getFlightPlans,
    getWeatherForRoute as api_operations_flight_planning_getWeatherForRoute,
    updateFlightPlan as api_operations_flight_planning_updateFlightPlan
} from "~backend/operations/flight-planning";
import {
    createFlightSchedule as api_operations_flight_scheduling_createFlightSchedule,
    deleteFlightSchedule as api_operations_flight_scheduling_deleteFlightSchedule,
    getFlightScheduleStats as api_operations_flight_scheduling_getFlightScheduleStats,
    getFlightSchedules as api_operations_flight_scheduling_getFlightSchedules,
    getFlightSchedulesByAircraft as api_operations_flight_scheduling_getFlightSchedulesByAircraft,
    getFlightSchedulesByDateRange as api_operations_flight_scheduling_getFlightSchedulesByDateRange,
    updateFlightSchedule as api_operations_flight_scheduling_updateFlightSchedule
} from "~backend/operations/flight-scheduling";
import {
    createLogbookEntry as api_operations_logbook_createLogbookEntry,
    deleteLogbookEntry as api_operations_logbook_deleteLogbookEntry,
    getLogbook as api_operations_logbook_getLogbook
} from "~backend/operations/logbook";
import {
    getOperationsConfig as api_operations_operations_config_getOperationsConfig,
    saveOperationsConfig as api_operations_operations_config_saveOperationsConfig
} from "~backend/operations/operations-config";
import { getCrewMonthlyReport as api_operations_reports_getCrewMonthlyReport } from "~backend/operations/reports";

export namespace operations {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.calculateFlightParameters = this.calculateFlightParameters.bind(this)
            this.createAerodrome = this.createAerodrome.bind(this)
            this.createAircraft = this.createAircraft.bind(this)
            this.createCrewMember = this.createCrewMember.bind(this)
            this.createFavoriteRoute = this.createFavoriteRoute.bind(this)
            this.createFlightPlan = this.createFlightPlan.bind(this)
            this.createFlightSchedule = this.createFlightSchedule.bind(this)
            this.createLogbookEntry = this.createLogbookEntry.bind(this)
            this.deleteAerodrome = this.deleteAerodrome.bind(this)
            this.deleteAircraft = this.deleteAircraft.bind(this)
            this.deleteCrewMember = this.deleteCrewMember.bind(this)
            this.deleteFavoriteRoute = this.deleteFavoriteRoute.bind(this)
            this.deleteFlightPlan = this.deleteFlightPlan.bind(this)
            this.deleteFlightSchedule = this.deleteFlightSchedule.bind(this)
            this.deleteLogbookEntry = this.deleteLogbookEntry.bind(this)
            this.getAerodromes = this.getAerodromes.bind(this)
            this.getAircrafts = this.getAircrafts.bind(this)
            this.getCrewMembers = this.getCrewMembers.bind(this)
            this.getCrewMonthlyReport = this.getCrewMonthlyReport.bind(this)
            this.getFavoriteRoutes = this.getFavoriteRoutes.bind(this)
            this.getFlightPlans = this.getFlightPlans.bind(this)
            this.getFlightScheduleStats = this.getFlightScheduleStats.bind(this)
            this.getFlightSchedules = this.getFlightSchedules.bind(this)
            this.getFlightSchedulesByAircraft = this.getFlightSchedulesByAircraft.bind(this)
            this.getFlightSchedulesByDateRange = this.getFlightSchedulesByDateRange.bind(this)
            this.getLogbook = this.getLogbook.bind(this)
            this.getOperationsConfig = this.getOperationsConfig.bind(this)
            this.getPilots = this.getPilots.bind(this)
            this.getWeatherForRoute = this.getWeatherForRoute.bind(this)
            this.saveOperationsConfig = this.saveOperationsConfig.bind(this)
            this.updateAerodrome = this.updateAerodrome.bind(this)
            this.updateAircraft = this.updateAircraft.bind(this)
            this.updateCrewMember = this.updateCrewMember.bind(this)
            this.updateFlightPlan = this.updateFlightPlan.bind(this)
            this.updateFlightSchedule = this.updateFlightSchedule.bind(this)
        }

        /**
         * Calculates distance and fuel requirements.
         */
        public async calculateFlightParameters(params: RequestType<typeof api_operations_flight_planning_calculateFlightParameters>): Promise<ResponseType<typeof api_operations_flight_planning_calculateFlightParameters>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-parameters/calculate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_planning_calculateFlightParameters>
        }

        /**
         * Creates a new aerodrome.
         */
        public async createAerodrome(params: RequestType<typeof api_operations_aerodromes_createAerodrome>): Promise<ResponseType<typeof api_operations_aerodromes_createAerodrome>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/aerodromes`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_aerodromes_createAerodrome>
        }

        /**
         * Creates a new aircraft.
         */
        public async createAircraft(params: RequestType<typeof api_operations_aircraft_createAircraft>): Promise<ResponseType<typeof api_operations_aircraft_createAircraft>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/aircrafts`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_aircraft_createAircraft>
        }

        /**
         * Creates a new crew member.
         */
        public async createCrewMember(params: RequestType<typeof api_operations_crew_createCrewMember>): Promise<ResponseType<typeof api_operations_crew_createCrewMember>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crew`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_crew_createCrewMember>
        }

        /**
         * Creates a favorite route.
         */
        public async createFavoriteRoute(params: RequestType<typeof api_operations_flight_planning_createFavoriteRoute>): Promise<ResponseType<typeof api_operations_flight_planning_createFavoriteRoute>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/favorite-routes`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_planning_createFavoriteRoute>
        }

        /**
         * Creates a new flight plan.
         */
        public async createFlightPlan(params: RequestType<typeof api_operations_flight_planning_createFlightPlan>): Promise<ResponseType<typeof api_operations_flight_planning_createFlightPlan>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-plans`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_planning_createFlightPlan>
        }

        /**
         * Creates a new flight schedule.
         */
        public async createFlightSchedule(params: RequestType<typeof api_operations_flight_scheduling_createFlightSchedule>): Promise<ResponseType<typeof api_operations_flight_scheduling_createFlightSchedule>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-schedules`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_scheduling_createFlightSchedule>
        }

        /**
         * Creates a new logbook entry.
         */
        public async createLogbookEntry(params: RequestType<typeof api_operations_logbook_createLogbookEntry>): Promise<ResponseType<typeof api_operations_logbook_createLogbookEntry>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/logbook/entries`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_logbook_createLogbookEntry>
        }

        /**
         * Deletes an aerodrome.
         */
        public async deleteAerodrome(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/aerodromes/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes an aircraft.
         */
        public async deleteAircraft(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/aircrafts/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a crew member.
         */
        public async deleteCrewMember(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/crew/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a favorite route.
         */
        public async deleteFavoriteRoute(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/favorite-routes/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a flight plan.
         */
        public async deleteFlightPlan(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/flight-plans/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a flight schedule.
         */
        public async deleteFlightSchedule(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/flight-schedules/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a logbook entry.
         */
        public async deleteLogbookEntry(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/logbook/entries/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves all aerodromes.
         */
        public async getAerodromes(): Promise<ResponseType<typeof api_operations_aerodromes_getAerodromes>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/aerodromes`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_aerodromes_getAerodromes>
        }

        /**
         * Retrieves all aircraft.
         */
        public async getAircrafts(): Promise<ResponseType<typeof api_operations_aircraft_getAircrafts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/aircrafts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_aircraft_getAircrafts>
        }

        /**
         * Retrieves all crew members.
         */
        public async getCrewMembers(): Promise<ResponseType<typeof api_operations_crew_getCrewMembers>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crew`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_crew_getCrewMembers>
        }

        /**
         * Retrieves a monthly report of hours flown by each crew member across all aircraft.
         */
        public async getCrewMonthlyReport(params: RequestType<typeof api_operations_reports_getCrewMonthlyReport>): Promise<ResponseType<typeof api_operations_reports_getCrewMonthlyReport>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                month: String(params.month),
                year:  String(params.year),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reports/crew-monthly`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_reports_getCrewMonthlyReport>
        }

        /**
         * Retrieves all favorite routes.
         */
        public async getFavoriteRoutes(): Promise<ResponseType<typeof api_operations_flight_planning_getFavoriteRoutes>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/favorite-routes`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_planning_getFavoriteRoutes>
        }

        /**
         * Retrieves all flight plans.
         */
        public async getFlightPlans(): Promise<ResponseType<typeof api_operations_flight_planning_getFlightPlans>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-plans`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_planning_getFlightPlans>
        }

        /**
         * Retrieves flight schedule statistics.
         */
        public async getFlightScheduleStats(params: RequestType<typeof api_operations_flight_scheduling_getFlightScheduleStats>): Promise<ResponseType<typeof api_operations_flight_scheduling_getFlightScheduleStats>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                month: params.month === undefined ? undefined : String(params.month),
                year:  params.year === undefined ? undefined : String(params.year),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-schedules/stats`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_scheduling_getFlightScheduleStats>
        }

        /**
         * Retrieves all flight schedules.
         */
        public async getFlightSchedules(): Promise<ResponseType<typeof api_operations_flight_scheduling_getFlightSchedules>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-schedules`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_scheduling_getFlightSchedules>
        }

        /**
         * Retrieves flight schedules by aircraft.
         */
        public async getFlightSchedulesByAircraft(params: { aeronave: string }): Promise<ResponseType<typeof api_operations_flight_scheduling_getFlightSchedulesByAircraft>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-schedules/aircraft/${encodeURIComponent(params.aeronave)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_scheduling_getFlightSchedulesByAircraft>
        }

        /**
         * Retrieves flight schedules by date range.
         */
        public async getFlightSchedulesByDateRange(params: RequestType<typeof api_operations_flight_scheduling_getFlightSchedulesByDateRange>): Promise<ResponseType<typeof api_operations_flight_scheduling_getFlightSchedulesByDateRange>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "end_date":   params["end_date"].toISOString(),
                "start_date": params["start_date"].toISOString(),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-schedules/date-range`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_scheduling_getFlightSchedulesByDateRange>
        }

        /**
         * Retrieves or creates a logbook for a specific aircraft and period.
         */
        public async getLogbook(params: RequestType<typeof api_operations_logbook_getLogbook>): Promise<ResponseType<typeof api_operations_logbook_getLogbook>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "aircraft_id": params["aircraft_id"],
                month:         String(params.month),
                year:          String(params.year),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/logbook`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_logbook_getLogbook>
        }

        /**
         * Retrieves the operations configuration.
         */
        public async getOperationsConfig(): Promise<ResponseType<typeof api_operations_operations_config_getOperationsConfig>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/operations/config`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_operations_config_getOperationsConfig>
        }

        /**
         * Retrieves only pilots.
         */
        public async getPilots(): Promise<ResponseType<typeof api_operations_crew_getPilots>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crew/pilots`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_crew_getPilots>
        }

        /**
         * Gets weather data for a route.
         */
        public async getWeatherForRoute(params: RequestType<typeof api_operations_flight_planning_getWeatherForRoute>): Promise<ResponseType<typeof api_operations_flight_planning_getWeatherForRoute>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                arrival:   params.arrival,
                departure: params.departure,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/weather/route`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_planning_getWeatherForRoute>
        }

        /**
         * Creates or updates the operations configuration.
         */
        public async saveOperationsConfig(params: RequestType<typeof api_operations_operations_config_saveOperationsConfig>): Promise<ResponseType<typeof api_operations_operations_config_saveOperationsConfig>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/operations/config`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_operations_config_saveOperationsConfig>
        }

        /**
         * Updates an existing aerodrome.
         */
        public async updateAerodrome(params: RequestType<typeof api_operations_aerodromes_updateAerodrome>): Promise<ResponseType<typeof api_operations_aerodromes_updateAerodrome>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                coordinates:   params.coordinates,
                icao:          params.icao,
                "is_favorite": params["is_favorite"],
                name:          params.name,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/aerodromes/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_aerodromes_updateAerodrome>
        }

        /**
         * Updates an existing aircraft.
         */
        public async updateAircraft(params: RequestType<typeof api_operations_aircraft_updateAircraft>): Promise<ResponseType<typeof api_operations_aircraft_updateAircraft>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "consumption_per_hour": params["consumption_per_hour"],
                model:                  params.model,
                registration:           params.registration,
                status:                 params.status,
                "total_hours":          params["total_hours"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/aircrafts/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_aircraft_updateAircraft>
        }

        /**
         * Updates an existing crew member.
         */
        public async updateCrewMember(params: RequestType<typeof api_operations_crew_updateCrewMember>): Promise<ResponseType<typeof api_operations_crew_updateCrewMember>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "anac_license": params["anac_license"],
                cpf:            params.cpf,
                department:     params.department,
                "is_active":    params["is_active"],
                "is_pilot":     params["is_pilot"],
                name:           params.name,
                position:       params.position,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crew/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_crew_updateCrewMember>
        }

        /**
         * Updates an existing flight plan.
         */
        public async updateFlightPlan(params: RequestType<typeof api_operations_flight_planning_updateFlightPlan>): Promise<ResponseType<typeof api_operations_flight_planning_updateFlightPlan>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                aircraft:              params.aircraft,
                altitude:              params.altitude,
                "arrival_airport":     params["arrival_airport"],
                "arrival_time":        params["arrival_time"],
                "checklist_completed": params["checklist_completed"],
                "departure_airport":   params["departure_airport"],
                "departure_time":      params["departure_time"],
                "ete_minutes":         params["ete_minutes"],
                "flight_number":       params["flight_number"],
                "fuel_burn_liters":    params["fuel_burn_liters"],
                route:                 params.route,
                status:                params.status,
                "weight_balance":      params["weight_balance"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-plans/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_planning_updateFlightPlan>
        }

        /**
         * Updates an existing flight schedule.
         */
        public async updateFlightSchedule(params: RequestType<typeof api_operations_flight_scheduling_updateFlightSchedule>): Promise<ResponseType<typeof api_operations_flight_scheduling_updateFlightSchedule>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                aeronave:           params.aeronave,
                "contato_cliente":  params["contato_cliente"],
                data:               params.data,
                destino:            params.destino,
                "duracao_estimada": params["duracao_estimada"],
                horario:            params.horario,
                "nome_cliente":     params["nome_cliente"],
                observacoes:        params.observacoes,
                origem:             params.origem,
                passageiros:        params.passageiros,
                status:             params.status,
                "tipo_voo":         params["tipo_voo"],
                tripulacao:         params.tripulacao,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/flight-schedules/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_operations_flight_scheduling_updateFlightSchedule>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    deleteDocument as api_profile_documents_deleteDocument,
    downloadDocument as api_profile_documents_downloadDocument,
    getMyDocuments as api_profile_documents_getMyDocuments,
    uploadDocument as api_profile_documents_uploadDocument
} from "~backend/profile/documents";
import {
    deleteUserProfile as api_profile_user_profile_deleteUserProfile,
    getMyProfile as api_profile_user_profile_getMyProfile,
    updateUserProfile as api_profile_user_profile_updateUserProfile
} from "~backend/profile/user-profile";

export namespace profile {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.deleteDocument = this.deleteDocument.bind(this)
            this.deleteUserProfile = this.deleteUserProfile.bind(this)
            this.downloadDocument = this.downloadDocument.bind(this)
            this.getMyDocuments = this.getMyDocuments.bind(this)
            this.getMyProfile = this.getMyProfile.bind(this)
            this.updateUserProfile = this.updateUserProfile.bind(this)
            this.uploadDocument = this.uploadDocument.bind(this)
        }

        /**
         * Deletes a document, checking for ownership.
         */
        public async deleteDocument(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/documents/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a user profile.
         */
        public async deleteUserProfile(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/profile/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Downloads a document, checking for ownership.
         */
        public async downloadDocument(params: { id: string }): Promise<ResponseType<typeof api_profile_documents_downloadDocument>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/documents/${encodeURIComponent(params.id)}/download`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_profile_documents_downloadDocument>
        }

        /**
         * Retrieves authenticated user's documents by type.
         */
        public async getMyDocuments(params: RequestType<typeof api_profile_documents_getMyDocuments>): Promise<ResponseType<typeof api_profile_documents_getMyDocuments>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                tipo: params.tipo,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/documents/me`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_profile_documents_getMyDocuments>
        }

        /**
         * Retrieves current user profile.
         */
        public async getMyProfile(): Promise<ResponseType<typeof api_profile_user_profile_getMyProfile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/profile/me`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_profile_user_profile_getMyProfile>
        }

        /**
         * Updates an existing user profile.
         */
        public async updateUserProfile(params: RequestType<typeof api_profile_user_profile_updateUserProfile>): Promise<ResponseType<typeof api_profile_user_profile_updateUserProfile>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "dados_bancarios":     params["dados_bancarios"],
                "dados_pessoais":      params["dados_pessoais"],
                "dados_profissionais": params["dados_profissionais"],
                "foto_perfil":         params["foto_perfil"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/profile/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_profile_user_profile_updateUserProfile>
        }

        /**
         * Uploads a new document for the authenticated user.
         */
        public async uploadDocument(params: RequestType<typeof api_profile_documents_uploadDocument>): Promise<ResponseType<typeof api_profile_documents_uploadDocument>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/documents`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_profile_documents_uploadDocument>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    create as api_purchasing_requisitions_create,
    getStats as api_purchasing_requisitions_getStats,
    list as api_purchasing_requisitions_list,
    update as api_purchasing_requisitions_update
} from "~backend/purchasing/requisitions";

export namespace purchasing {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.getStats = this.getStats.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new purchase requisition.
         */
        public async create(params: RequestType<typeof api_purchasing_requisitions_create>): Promise<ResponseType<typeof api_purchasing_requisitions_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/purchasing/requisitions`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_purchasing_requisitions_create>
        }

        /**
         * Retrieves purchase requisition statistics.
         */
        public async getStats(): Promise<ResponseType<typeof api_purchasing_requisitions_getStats>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/purchasing/requisitions/stats`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_purchasing_requisitions_getStats>
        }

        /**
         * Lists purchase requisitions. Admins see all, others see their own.
         */
        public async list(): Promise<ResponseType<typeof api_purchasing_requisitions_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/purchasing/requisitions`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_purchasing_requisitions_list>
        }

        /**
         * Updates a purchase requisition. Only admin can update any, others only their own.
         */
        public async update(params: RequestType<typeof api_purchasing_requisitions_update>): Promise<ResponseType<typeof api_purchasing_requisitions_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description: params.description,
                "needed_by": params["needed_by"],
                priority:    params.priority,
                status:      params.status,
                title:       params.title,
                type:        params.type,
                value:       params.value,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/purchasing/requisitions/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_purchasing_requisitions_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { globalSearch as api_search_global_globalSearch } from "~backend/search/global";

export namespace search {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.globalSearch = this.globalSearch.bind(this)
        }

        public async globalSearch(params: RequestType<typeof api_search_global_globalSearch>): Promise<ResponseType<typeof api_search_global_globalSearch>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                query: params.query,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/search`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_search_global_globalSearch>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    create as api_tasks_tasks_create,
    del as api_tasks_tasks_del,
    list as api_tasks_tasks_list,
    update as api_tasks_tasks_update
} from "~backend/tasks/tasks";

export namespace tasks {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.del = this.del.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new task for the authenticated user.
         */
        public async create(params: RequestType<typeof api_tasks_tasks_create>): Promise<ResponseType<typeof api_tasks_tasks_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tasks_tasks_create>
        }

        /**
         * Deletes a task, checking for ownership.
         */
        public async del(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/tasks/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Lists tasks for the authenticated user.
         */
        public async list(): Promise<ResponseType<typeof api_tasks_tasks_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tasks_tasks_list>
        }

        /**
         * Updates a task, checking for ownership.
         */
        public async update(params: RequestType<typeof api_tasks_tasks_update>): Promise<ResponseType<typeof api_tasks_tasks_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                category:    params.category,
                description: params.description,
                "due_date":  params["due_date"],
                priority:    params.priority,
                status:      params.status,
                title:       params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tasks_tasks_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createVacationRequest as api_vacation_vacation_management_createVacationRequest,
    deleteVacationRequest as api_vacation_vacation_management_deleteVacationRequest,
    getMyVacationBalance as api_vacation_vacation_management_getMyVacationBalance,
    getMyVacationRequests as api_vacation_vacation_management_getMyVacationRequests,
    getUserVacationBalance as api_vacation_vacation_management_getUserVacationBalance,
    getUserVacationRequests as api_vacation_vacation_management_getUserVacationRequests,
    updateVacationRequestStatus as api_vacation_vacation_management_updateVacationRequestStatus
} from "~backend/vacation/vacation-management";

export namespace vacation {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createVacationRequest = this.createVacationRequest.bind(this)
            this.deleteVacationRequest = this.deleteVacationRequest.bind(this)
            this.getMyVacationBalance = this.getMyVacationBalance.bind(this)
            this.getMyVacationRequests = this.getMyVacationRequests.bind(this)
            this.getUserVacationBalance = this.getUserVacationBalance.bind(this)
            this.getUserVacationRequests = this.getUserVacationRequests.bind(this)
            this.updateVacationRequestStatus = this.updateVacationRequestStatus.bind(this)
        }

        /**
         * Creates a new vacation request for the authenticated user.
         */
        public async createVacationRequest(params: RequestType<typeof api_vacation_vacation_management_createVacationRequest>): Promise<ResponseType<typeof api_vacation_vacation_management_createVacationRequest>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vacation/requests`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vacation_vacation_management_createVacationRequest>
        }

        /**
         * Deletes a vacation request.
         */
        public async deleteVacationRequest(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/vacation/requests/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves current user's vacation balance.
         */
        public async getMyVacationBalance(): Promise<ResponseType<typeof api_vacation_vacation_management_getMyVacationBalance>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vacation/balance/me`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vacation_vacation_management_getMyVacationBalance>
        }

        /**
         * Retrieves current user's vacation requests.
         */
        public async getMyVacationRequests(): Promise<ResponseType<typeof api_vacation_vacation_management_getMyVacationRequests>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vacation/requests/me`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vacation_vacation_management_getMyVacationRequests>
        }

        /**
         * Calculates vacation balance for a specific user (admin only).
         */
        public async getUserVacationBalance(params: RequestType<typeof api_vacation_vacation_management_getUserVacationBalance>): Promise<ResponseType<typeof api_vacation_vacation_management_getUserVacationBalance>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "admission_date": params["admission_date"].toISOString(),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vacation/balance/user/${encodeURIComponent(params.user_id)}`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vacation_vacation_management_getUserVacationBalance>
        }

        /**
         * Retrieves vacation requests for a specific user (admin only).
         */
        public async getUserVacationRequests(params: { user_id: string }): Promise<ResponseType<typeof api_vacation_vacation_management_getUserVacationRequests>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vacation/requests/user/${encodeURIComponent(params.user_id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vacation_vacation_management_getUserVacationRequests>
        }

        /**
         * Approves or rejects a vacation request (admin only).
         */
        public async updateVacationRequestStatus(params: RequestType<typeof api_vacation_vacation_management_updateVacationRequestStatus>): Promise<ResponseType<typeof api_vacation_vacation_management_updateVacationRequestStatus>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                notes:  params.notes,
                status: params.status,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vacation/requests/${encodeURIComponent(params.id)}/status`, {method: "PATCH", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vacation_vacation_management_updateVacationRequestStatus>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | RequestType<typeof auth_auth>
  | Promise<RequestType<typeof auth_auth> | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.48.8)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: RequestType<typeof auth_auth> | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};


            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
